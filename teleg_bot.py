# teleg_bot.py
import configparser
import os
import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import threading
####
from rec_foto import status_cam
from conv_vid import del_and_free
######—Ç–µ–º–ø
import shutil
##### nemp


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–ï–°–¨  main
import main
CAMERA_INFO = {}
config = configparser.ConfigParser()
with open('info.ini', 'r', encoding='utf-8') as f:
    config.read_file(f)

vid_cam = config.get('section2', 'id_cam').split(', ')

#  –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ú–ï–†
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä:
# "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏": {"index": —Å–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã, "id": —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä}

for i in range(len(vid_cam)):
    if vid_cam[i].isdigit():
        vid_cam[i] = int(vid_cam[i])
    CAMERA_INFO[f"–ö–∞–º–µ—Ä–∞ {i+1}"] = {"index": vid_cam[i],
                     "id": f"cam{i + 1}"}
#  –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö –ö–ê–ú–ï–†

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞–º–∏
camera_threads = {} # {"cam_id": Thread_object} - —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–µ—Ä—ã
is_video_running = {info["id"]: False for info in CAMERA_INFO.values()} # {"cam_id": True/False} - —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞

#  –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ info.ini
config = configparser.ConfigParser()
with open('info.ini', 'r', encoding='utf-8') as f:
    config.read_file(f)
# –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
tel_key = config.get('section1', 'tel_bot')
userid = config.get('section1', 'userid')
VideoBot = telebot.TeleBot(f'{tel_key}')
# –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
video_base = config.get('section2', 'video')
# –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω–æ–≤
screen_dir = config.get('section2', 'pict')


#  –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
if os.name == 'posix': # –¥–ª—è Linux/macOS
    base_video_path = video_base
    base_screenshot_path = screen_dir
    # base_video_path = f'/home/lives/–í–∏–¥–µ–æ' # –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å
    # base_screenshot_path = f"/home/lives/–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
else: # –¥–ª—è Windows
    base_video_path = video_base
    base_screenshot_path = screen_dir
    # base_video_path = f'C:\\video'
    # base_screenshot_path = f"C:\\–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

def get_folders_list(base_dir, camera_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã."""
    full_path = os.path.join(base_dir, camera_id)
    if not os.path.exists(full_path):
        os.makedirs(full_path, exist_ok=True)
        return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        return [d for d in os.listdir(full_path) if os.path.isdir(os.path.join(full_path, d))]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –∏–∑ {full_path}: {e}")
        return []

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
markup.add(
    KeyboardButton("–í–ò–î–ï–û üìπ"),
    KeyboardButton("–§–û–¢–û üì∑"),
    KeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ'),
    KeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫'),
    KeyboardButton(f'–ú–µ—Å—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –Ω–∞ –¥–∏—Å–∫–µ: {del_and_free(0)[1]}%')
    )

@VideoBot.message_handler(commands=['start'])
def start_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    VideoBot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@VideoBot.message_handler(content_types=['text'])
def message_user(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    if not (message.from_user.id == int(userid)):
        VideoBot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return


    action_map = {
        '–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ': 'start_cam',
        '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫': 'stop_cam',
        '–≤–∏–¥–µ–æ üìπ': 'select_cam_video',
        '—Ñ–æ—Ç–æ üì∑': 'select_cam_foto',

    }

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    action_prefix = action_map.get(message.text.lower())
####################################################################################
    # 6.   % –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏—Å–∫–∞
    if message.text[:5] == '–ú–µ—Å—Ç–æ':
        info = del_and_free()
        markup1 = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        markup1.add(
            KeyboardButton("–í–ò–î–ï–û üìπ"),
            KeyboardButton("–§–û–¢–û üì∑"),
            KeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ'),
            KeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫'),
            KeyboardButton(f'–ú–µ—Å—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –Ω–∞ –¥–∏—Å–∫–µ: {del_and_free(0)[1]}%')
        )
        VideoBot.send_message(message.chat.id, f'{info[0][:-7]}\n'
                                               f'–î–æ—Å—Ç—É–ø–Ω–æ: {info[1]}%', reply_markup=markup1)
        return
####################################################################################

    if not action_prefix:
        VideoBot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=markup)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–º–µ—Ä—ã
    cam_selection_markup = types.InlineKeyboardMarkup(row_width=1)
    for cam_name, cam_data,  in CAMERA_INFO.items():
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–í–û–ï–¢–û–ß–ò–ï (:) –ö–ê–ö –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨
        callback_data = f'{action_prefix}:{cam_data["id"]}'
        # –≤–æ—Ç –∫–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ –∫–∞–º–µ—Ä–∞ –∏–ª–∏ –µ–µ –Ω–æ–º–µ—Ä, –∏–ª–∏ –∫–∞–∫ –æ–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∞
        rt = (f'\n–ò–º—è: {cam_data["index"]}')
        #cam_selection_markup.add(types.InlineKeyboardButton(cam_name, callback_data=callback_data))
        cam_selection_markup.add(types.InlineKeyboardButton((cam_name+rt), callback_data=callback_data))

    action_messages = {
        'start_cam': "–ö–∞–∫—É—é –∫–∞–º–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å?",
        'stop_cam': "–ö–∞–∫—É—é –∫–∞–º–µ—Ä—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
        'select_cam_video': "–í—ã–±–µ—Ä–∏ –∫–∞–º–µ—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ:",
        'select_cam_foto': "–í—ã–±–µ—Ä–∏ –∫–∞–º–µ—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ:",

    }
    VideoBot.send_message(message.chat.id, action_messages[action_prefix], reply_markup=cam_selection_markup)


@VideoBot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
    if not (call.from_user.id == int(userid)):
        VideoBot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return


    #  CALL.DATA
    # –¥–≤–æ–µ—Ç–æ—á–∏–µ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
    # –§–æ—Ä–º–∞—Ç—ã:
    # '–¥–µ–π—Å—Ç–≤–∏–µ:id_–∫–∞–º–µ—Ä—ã' -> ['start_cam', 'cam1']
    # '–¥–µ–π—Å—Ç–≤–∏–µ:id_–∫–∞–º–µ—Ä—ã:–∏–º—è_–ø–∞–ø–∫–∏' -> ['skan_video', 'cam1', 'video_01012024']
    # '–¥–µ–π—Å—Ç–≤–∏–µ:id_–∫–∞–º–µ—Ä—ã:–∏–º—è_–ø–∞–ø–∫–∏:–∏–º—è_—Ñ–∞–π–ª–∞' -> ['up', 'cam1', 'video_01012024', 'motion.mp4']
    parts = call.data.split(':', maxsplit=3)
    action = parts[0]
    cam_id = parts[1] if len(parts) > 1 else None
    folder_name = parts[2] if len(parts) > 2 else None
    file_name = parts[3] if len(parts) > 3 else None



    # 1. –ó–ê–ü–£–°–ö –ü–û–¢–û–ö–ê
    if action == 'start_cam':
        cam_index = next((info["index"] for name, info in CAMERA_INFO.items() if info["id"] == cam_id), None)

        if cam_index is None:
            VideoBot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: –ö–∞–º–µ—Ä–∞ —Å ID {cam_id.replace('cam', '')} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if is_video_running.get(cam_id) and camera_threads.get(cam_id) and camera_threads[cam_id].is_alive():
            VideoBot.send_message(call.message.chat.id, f"–ü–æ—Ç–æ–∫ '{cam_id.replace('cam', '–∫–∞–º–µ—Ä—ã ')}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        else:
            VideoBot.send_message(call.message.chat.id, f"–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ '{cam_id.replace('cam', '–∫–∞–º–µ—Ä—ã ')}'...")
            thread = threading.Thread(target=main.video_cap, args=(cam_index, cam_id,))
            thread.start()
            camera_threads[cam_id] = thread
            is_video_running[cam_id] = True

    #  2. –û–°–¢–ê–ù–û–í–ö–ê –ü–û–¢–û–ö–ê
    elif action == 'stop_cam':
        if is_video_running.get(cam_id) and camera_threads.get(cam_id) and camera_threads[cam_id].is_alive():
            main.stop_video_stream[cam_id] = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            is_video_running[cam_id] = False
            VideoBot.send_message(call.message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ "
                                                        f"{cam_id.replace('cam', '–∫–∞–º–µ—Ä—ã: ')} .\n"
                                                        f"–ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
        else:
            VideoBot.send_message(call.message.chat.id, f"–ü–æ—Ç–æ–∫ –¥–ª—è '{cam_id.replace('cam', '–∫–∞–º–µ—Ä—ã ')}' –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

    #  3. –í–´–ë–û–† –ö–ê–ú–ï–†–´ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –§–ê–ô–õ–û–í
    elif action in ['select_cam_video', 'select_cam_foto']:
        base_path = base_video_path if action == 'select_cam_video' else base_screenshot_path
        scan_action = 'skan_video' if action == 'select_cam_video' else 'skan_foto'
        
        folders = get_folders_list(base_path, cam_id)
        if not folders:
            VideoBot.send_message(call.message.chat.id, f'–ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è '
                                                        f'{cam_id.replace('cam', '–∫–∞–º–µ—Ä—ã ')} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for folder in folders:
            callback_data = f'{scan_action}:{cam_id}:{folder}'
            markup.add(types.InlineKeyboardButton(folder, callback_data=callback_data))
        VideoBot.send_message(call.message.chat.id,
                              f'–í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É –¥–ª—è {cam_id.replace('cam', '–∫–∞–º–µ—Ä—ã ')}:', reply_markup=markup)

    #  4. –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–ê–ü–ö–ò (–ü–û–ö–ê–ó –§–ê–ô–õ–û–í)
    elif action in ['skan_video', 'skan_foto']:
        base_path = base_video_path if action == 'skan_video' else base_screenshot_path
        current_path = os.path.join(base_path, cam_id, folder_name)

        if not os.path.exists(current_path):
            VideoBot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        files = [f for f in os.listdir(current_path) if os.path.isfile(os.path.join(current_path, f))]
        if not files:
            VideoBot.send_message(call.message.chat.id, '–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.')
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for f_name in files:
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ, –∏—Å–ø–æ–ª—å–∑—É—è ':'
            callback_data = f'up:{cam_id}:{folder_name}:{f_name}'
            markup.add(types.InlineKeyboardButton(f_name, callback_data=callback_data))
        VideoBot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', reply_markup=markup)

    #  5. –û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
    elif action == 'up':
        is_video_file = file_name.lower().endswith(('.mp4', '.avi', '.mov', '.mkv'))
        base_path = base_video_path if is_video_file else base_screenshot_path
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∏–∑ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
        file_path = os.path.join(base_path, cam_id, folder_name, file_name)

        if not os.path.exists(file_path):
            VideoBot.send_message(call.message.chat.id, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–∂–∏–¥–∞–ª—Å—è –ø—É—Ç—å: {file_path}")
            return
        
        try:
            with open(file_path, 'rb') as f:
                if file_path.lower().endswith(('.png', '.jpg', '.jpeg')):
                    VideoBot.send_photo(call.message.chat.id, f)
                elif is_video_file:
                    VideoBot.send_video(call.message.chat.id, f)
                else:
                    VideoBot.send_document(call.message.chat.id, f)
        except telebot.apihelper.ApiTelegramException as e:
            if "file is too big" in str(e):
                VideoBot.send_message(call.message.chat.id, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            else:
                VideoBot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        except Exception as e:
            VideoBot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")

    else:
        VideoBot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")



status_cam( "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏\n–Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é")
VideoBot.polling(none_stop=True, interval=0)


